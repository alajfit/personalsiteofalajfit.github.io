{"version":3,"sources":["types.ts","components/Navbar/index.tsx","components/SocialBar/index.tsx","components/Splash/index.tsx","pages/Home.tsx","api/index.ts","components/Spacer/index.tsx","components/BlogList/index.tsx","pages/Blogs.tsx","api/utils.ts","components/BlogPage/index.tsx","pages/_Blog.tsx","pages/Projects.tsx","serviceWorker.ts","index.tsx"],"names":["EncodingType","MobileNavbar","className","to","style","color","DesktopNavbar","Navbar","SocialBar","href","font","colr","map","site","key","target","rel","MyName","TagLine","Splash","para","i","Home","getBlog","blogSha","fetch","then","res","json","data","Spacer","BlogListing","name","date","type","time","desc","split","join","BlogList","blogs","sort","a","b","Date","getTime","blog","Blogs","useState","setBlogs","useEffect","tree","filter","file","path","startsWith","blogSubString","substring","lastIndexOf","sha","cleanBlogDataFromUrl","hljs","registerLanguage","javascript","BlogImage","alt","src","BlogCode","value","language","blogCode","highlightBlock","ref","el","BlogPage","source","renderers","image","code","atob","Blog","useParams","node_id","size","url","content","encoding","BASE64","setBlog","fetchBlog","toString","Projects","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.351a909a.chunk.js","sourcesContent":["export interface GithubTree {\n    sha: String;\n    url: String;\n    tree: GithubTreeInfo[];\n    truncated: Boolean;\n}\n\nexport interface GithubTreeInfo {\n    path: String;\n    mode: String;\n    type: String;\n    sha: String;\n    size: Number;\n    url: String;\n}\n\nexport enum EncodingType {\n    BASE64 = 'base64',\n}\n\nexport interface GithubBlogInfo {\n    sha: String;\n    node_id: String;\n    size: Number;\n    url: String;\n    content: String;\n    encoding: EncodingType.BASE64;\n}\n\nexport interface IBlogListing {\n    name: string;\n    href: string;\n    date: string;\n    type: string;\n    time: string;\n    desc: string;\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './index.scss';\n\nconst MobileNavbar = () => (\n    <ul className=\"MobileNavbar\">\n        <li className=\"MobileNavbar-item\">\n            <Link to=\"/\">\n                <i className=\"far fa-user-circle\" style={{ color: '#9b111e' }} />\n            </Link>\n        </li>\n        <li className=\"MobileNavbar-item\">\n            <Link to=\"/blogs\">\n                <i className=\"fas fa-pen-alt\" style={{ color: '#333333' }} />\n            </Link>\n        </li>\n        <li className=\"MobileNavbar-item\">\n            <Link to=\"/projects\">\n                <i className=\"fas fa-cubes\" style={{ color: '#1787fb' }} />\n            </Link>\n        </li>\n    </ul>\n)\n\nconst DesktopNavbar = () => (\n    <ul className=\"DesktopNavbar\">\n        <li className=\"DesktopNavbar-item\">\n            <Link to=\"/\">\n                Home\n            </Link>\n        </li>\n        <li className=\"DesktopNavbar-item\">\n            <Link to=\"/blogs\">\n                Blog\n            </Link>\n        </li>\n        <li className=\"DesktopNavbar-item\">\n            <Link to=\"/projects\">\n                Projects\n            </Link>\n        </li>\n        <li className=\"DesktopNavbar-item\">\n            <Link to=\"/contact\">\n                Contact\n            </Link>\n        </li>\n    </ul>\n)\n\nexport const Navbar = () => (\n    <div className=\"Navbar\">\n        <DesktopNavbar />\n        <MobileNavbar />\n    </div>\n)\n","import React from 'react';\nimport './index.scss';\n\ninterface SocialSite {\n    href: string;\n    font: string;\n    colr: string;\n}\n\nexport const SocialBar: React.FC = () => {\n    const social: SocialSite[] = [{\n        href: 'https://twitter.com/staratarms',\n        font: 'fab fa-twitter',\n        colr: '#1DA1F2'\n    }, {\n        href: 'https://www.instagram.com/staratarms',\n        font: 'fab fa-instagram',\n        colr: '#fb3958'\n    }, {\n        href: 'https://www.linkedin.com/in/alanjfitzpatrick',\n        font: 'fab fa-linkedin-in',\n        colr: '#0077B5'\n    }, {\n        href: 'https://github.com/alajfit',\n        font: 'fab fa-github',\n        colr: '#333333'\n    }, {\n        href: 'https://jsfiddle.net/user/alajfit',\n        font: 'fab fa-jsfiddle',\n        colr: '#1787fb'\n    }]\n\n    return (\n        <ul className=\"SocialBar\">\n            {social.map(site=> (\n                <li key={site.href}>\n                    <a href={site.href} target=\"_blank\" rel=\"noopener noreferrer\">\n                        <i className={site.font} style={{ color: site.colr}}></i>\n                    </a>\n                </li>\n            ))}\n        </ul>\n    )\n}\n","import React from 'react';\nimport { SocialBar } from 'components/SocialBar';\nimport './index.scss';\n\nconst MyName: React.FC = () => (\n    <h1 className=\"MyName\">Alan J. Fitzpatrick</h1>\n)\n\nconst TagLine: React.FC = () => (\n    <h2 className=\"Tagline\">\n        Full Stack Engineer who <i className=\"far fa-heart\" style={{ color: '#9b111e' }}></i>'s Node.js\n    </h2>\n)\n\nexport const Splash: React.FC = () => {\n    const aboutText = [\n        'Working as a Full Stack Developer in the trenches I have climbed my way up the Developer Tree of Knowledge',\n        'I have been fortunate enough to work with some of the biggest companies in the world, some of the oldest companies in the world and on some of the greatest projects you could imagine',\n        'I felt this was better than making a real site. Hey I just wanna Keep It Simple Stupid, why not try and find me on one of these:'\n    ]\n\n    return (\n        <div className=\"Splash\">\n            <MyName />\n            <TagLine />\n            {aboutText.map((para, i) => (\n                <p className=\"Splash-about-p\" key={i}>{para}</p>\n            ))}\n            <SocialBar />\n        </div>\n    )\n}\n","import React from 'react';\nimport { Splash } from 'components/Splash';\n\nexport const Home = () => (\n    <div>\n        <Splash />\n    </div>\n)\n","import { GithubTree, GithubBlogInfo, IBlogListing } from '../types';\nimport { cleanBlogDataFromUrl } from './utils';\n\nexport const getBlogs = (): Promise<IBlogListing[]> =>\n    fetch('https://api.github.com/repos/alajfit/site.personal/git/trees/master?recursive=1')\n        .then(res => res.json())\n        .then((data: GithubTree)  => data.tree.filter(file => file.path.startsWith('blogs/')))\n        .then(blogs => blogs.map(blog => cleanBlogDataFromUrl(blog)))\n\nexport const getBlog = (blogSha: String) =>\n    fetch(`https://api.github.com/repos/alajfit/site.personal/git/blobs/${blogSha}`)\n        .then(res => res.json())\n        .then((data: GithubBlogInfo) => data)\n\nexport const getProjects = () =>\n    fetch('https://api.github.com/repos/alajfit/site.personal/git/trees/master?recursive=1')\n        .then(res => res.json())\n        .then((data: GithubTree)  => data.tree.filter(file => file.path.startsWith('projects/')))\n","import React from 'react';\nimport './index.scss';\n\nexport const Spacer: React.FC = () => <div className=\"Spacer\"></div>\n","import React from 'react';\nimport { IBlogListing } from '../../types';\nimport { SocialBar } from 'components/SocialBar';\nimport { Spacer } from 'components/Spacer';\nimport './index.scss';\n\nconst BlogListing: React.FC<IBlogListing> = ({ name, href, date, type, time, desc }) => (\n    <li className=\"BlogListing\">\n        <a className=\"BlogListing-title\" href={href}>{name.split('-').join(' ')}</a>\n        <div className=\"BlogListing-time\">\n            <span>{date.split('-').join('/')}</span>\n            <span>Reading Time: {time} mins</span>\n        </div>\n        <div>Category: {type}</div>\n        <div className=\"BlogListing-desc\">{desc.split('-').join(' ')}</div>\n    </li>\n)\n\nexport const BlogList: React.FC<{ blogs: IBlogListing[] }> = ({ blogs }) => (\n    <div className=\"BlogList\">\n        <div className=\"BlogList-heading\">\n            <div className=\"BlogList-img\"></div>\n            <h1 className=\"BlogList-title\">Personal Blog of Alan J. Fitzpatrick</h1>\n        </div>\n        <ul className=\"BlogList-listings\">\n            {blogs.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()).map(blog => (\n                <BlogListing\n                    key={blog.name}\n                    name={blog.name}\n                    href={blog.href}\n                    date={blog.date}\n                    type={blog.type}\n                    time={blog.time}\n                    desc={blog.desc} />\n            ))}\n        </ul>\n        <Spacer />\n        <SocialBar />\n    </div>\n)\n","import React, { useState, useEffect } from 'react';\nimport { IBlogListing } from '../types';\nimport { getBlogs } from '../api';\nimport { BlogList } from 'components/BlogList';\n\nexport const Blogs = () => {\n    const [blogs, setBlogs] = useState<IBlogListing[]>([])\n\n    useEffect(() => {\n        getBlogs().then(blogs => setBlogs(blogs))\n    }, [])\n\n    return (\n        <BlogList blogs={blogs} />\n    )\n}","import { GithubTreeInfo, IBlogListing } from '../types';\n\nexport const cleanBlogDataFromUrl = (blog: GithubTreeInfo): IBlogListing => {\n    const blogSubString = blog.path.substring(\n        blog.path.lastIndexOf('/') + 1, \n        blog.path.lastIndexOf('.')\n    ).split('_')\n    \n    return {\n        name: blogSubString[3],\n        href: `/blogs/${blog.sha}`,\n        date: blogSubString[0],\n        type: blogSubString[1],\n        time: blogSubString[2],\n        desc: blogSubString[4],\n    }\n}\n","import React, { useEffect } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { SocialBar } from 'components/SocialBar';\nimport { Spacer } from 'components/Spacer';\nimport hljs from 'highlight.js/lib/core';\nimport javascript from 'highlight.js/lib/languages/javascript';\nimport 'highlight.js/styles/dracula.css';\nimport './index.scss';\nhljs.registerLanguage('javascript', javascript);\n\nconst BlogImage: React.FC<{ alt: string, src: string }> = ({ alt, src }) =>\n    <img className=\"BlogImage\" alt={alt} src={src} />\n\nconst BlogCode: React.FC<{ value: string; language: string; }> = ({ value, language }) => {\n    let blogCode: HTMLElement | null = null;\n\n    useEffect(() => {\n        hljs.highlightBlock(blogCode)\n    }, [value, blogCode])\n\n    return (\n        <pre className=\"BlogCode\">\n            <code ref={el => blogCode = el} className={`language-${language}`}>{value}</code>\n        </pre>\n    )\n}\n\nexport const BlogPage: React.FC<{ source: string }> = ({ source }) => {\n    const renderers = {\n        image: BlogImage,\n        code: BlogCode\n    };\n\n    return (\n        <div className=\"BlogPage\">\n            <ReactMarkdown source={atob(source)} renderers={renderers} />\n            <Spacer />\n            <SocialBar />\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { GithubBlogInfo, EncodingType } from '../types';\nimport { BlogPage } from 'components/BlogPage';\nimport { getBlog } from '../api';\n\nexport const Blog = () => {\n    let { blogSha } = useParams<{ blogSha: string }>();\n    const [blog, setBlog] = useState<GithubBlogInfo>({\n        sha: '',\n        node_id: '',\n        size: 0,\n        url: '',\n        content: '',\n        encoding: EncodingType.BASE64,\n    })\n\n    useEffect(() => {\n        const fetchBlog = async () => {\n            const blog = await getBlog(blogSha)\n            setBlog(blog);\n        }\n        fetchBlog()\n    }, [blogSha])\n\n    return (\n        <BlogPage source={blog.content.toString()} />\n    )\n}\n","import React from 'react';\n\nexport const Projects = () => (\n    <div>\n        <h1>Projects</h1>\n    </div>\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport { Navbar } from 'components/Navbar';\nimport { Home } from 'pages/Home';\nimport { Blogs } from 'pages/Blogs';\nimport { Blog } from 'pages/_Blog';\nimport { Projects } from 'pages/Projects';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Navbar />\n      <Switch>\n        <Route path=\"/projects\">\n          <Projects />\n        </Route>\n        <Route path=\"/blogs/:blogSha\">\n          <Blog />\n        </Route>\n        <Route path=\"/blogs\">\n          <Blogs />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}